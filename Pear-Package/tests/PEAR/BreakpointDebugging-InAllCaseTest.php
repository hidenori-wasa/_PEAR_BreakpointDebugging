<?php

chdir(__DIR__ . '/../../');
require_once './PEAR_Setting/BreakpointDebugging_MySetting.php';

use \BreakpointDebugging as B;

B::isUnitTestExeMode(true);

$testAutoload = 1;
if ($testAutoload === 1) { // The case which extends base class.
    class AutoloadTest extends \NativeClass
    {

    }

}
/**
 * Test class for BreakpointDebugging_InAllCase.
 * Generated by PHPUnit on 2012-09-30 at 16:24:30.
 */
class BreakpointDebugging_InAllCaseTest extends \BreakpointDebugging_UnitTestOverriding
{
    const TEST_CONST = 'The test constant.';

    /**
     * @covers \BreakpointDebugging_InAllCase<extended>
     */
    public function testIniCheck()
    {
        ob_start();
        B::iniCheck('safe_mode', '', 'Test message 1.');
        $this->assertTrue(ob_get_contents() === '');
        ob_clean();
        B::iniCheck('safe_mode', 'On', 'Test message 2.');
        $this->assertTrue(ob_get_contents() !== '');
        ob_clean();
        B::iniCheck('xdebug.remote_host', array ('Other1', 'Other2'), 'Test message 3.');
        $this->assertTrue(ob_get_clean() === '');
    }

    /**
     * @covers \BreakpointDebugging_InAllCase<extended>
     */
    public function testRegisterNotFixedLocation()
    {
        global $_BreakpointDebugging;
        static $isRegister = false;

        B::registerNotFixedLocation($isRegister);
        $notFixedLocation = $_BreakpointDebugging->notFixedLocations[count($_BreakpointDebugging->notFixedLocations) - 1];
        $this->assertTrue($notFixedLocation['function'] === 'testRegisterNotFixedLocation');
        $this->assertTrue($notFixedLocation['class'] === 'BreakpointDebugging_InAllCaseTest');
        $this->assertTrue(!array_key_exists('file', $notFixedLocation));
    }

    /**
     * @covers \BreakpointDebugging_InAllCase<extended>
     */
    public function testAddValuesToTrace()
    {
        global $_BreakpointDebugging;

        $testString = 'The test character string.';
        $values = array ('TEST_CONST' => BreakpointDebugging_InAllCaseTest::TEST_CONST, '$testString' => $testString);
        B::addValuesToTrace($values);
        $line = __LINE__ - 1;
        $valuesToTrace = $_BreakpointDebugging->valuesToTrace[__FILE__][$line];
        $this->assertTrue($valuesToTrace['function'] === 'testAddValuesToTrace');
        $this->assertTrue($valuesToTrace['class'] === 'BreakpointDebugging_InAllCaseTest');
        $this->assertTrue(!array_key_exists('file', $valuesToTrace));
        $this->assertTrue($valuesToTrace['values'] === $values);
    }

    /**
     * @covers \BreakpointDebugging_InAllCase<extended>
     */
    public function testConvertMbString_A()
    {
        // SJIS
        B::convertMbString("\x95\xB6\x8E\x9A ");
    }

    /**
     * @covers \BreakpointDebugging_InAllCase<extended>
     */
    public function testConvertMbString_B()
    {
        // UTF-8
        B::convertMbString("\xE6\x96\x87\xE5\xAD\x97 ");
    }

    /**
     * @covers \BreakpointDebugging_InAllCase<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging_InAllCase FUNCTION=convertMbString ID=3
     */
    public function testConvertMbString_C()
    {
        // SJIS + UTF-8
        B::convertMbString("\x95\xB6\x8E\x9A \xE6\x96\x87\xE5\xAD\x97 ");
    }

    /**
     * @covers \BreakpointDebugging_InAllCase<extended>
     */
    public function testMkdir()
    {
        $testDirName = B::$workDir . '/TestMkDir';
        if (is_dir($testDirName)) {
            rmdir($testDirName);
        }
        B::mkdir($testDirName, 0700);
        $this->assertTrue(is_dir($testDirName));
        //if (B::$os === 'WIN') {
        if (B::getOs() === 'WIN') {
            $this->markTestSkipped('Cannot test file permission in case of windows.');
        }
        clearstatcache();
        $this->assertTrue(substr(sprintf('%o', fileperms($testDirName)), -4) === '0700');
    }

    /**
     * @covers \BreakpointDebugging_InAllCase<extended>
     */
    public function testFopen()
    {
        $testFileName = B::$workDir . '/TestFopen.txt';
        if (is_file($testFileName)) {
            unlink($testFileName);
        }
        $pFile = B::fopen($testFileName, 'w+b', 0700);
        fclose($pFile);
        $this->assertTrue(is_file($testFileName));
        //if (B::$os === 'WIN') {
        if (B::getOs() === 'WIN') {
            $this->markTestSkipped('Cannot test file permission in case of windows.');
        }
        clearstatcache();
        $this->assertTrue(substr(sprintf('%o', fileperms($testFileName)), -4) === '0700');
    }

    /**
     * @covers \BreakpointDebugging_InAllCase<extended>
     */
    public function testCompressThenDecompressIntArray()
    {
        $intArray = array ();
        for ($count = 0; $count <= 400; $count++) {
            $intArray[] = $count;
        }
        $pFile = fopen(B::$workDir . '/test.bin', 'w+b');
        fwrite($pFile, B::compressIntArray($intArray));
        fwrite($pFile, B::compressIntArray($intArray));
        fflush($pFile);
        rewind($pFile);
        while ($intResultArray = B::decompressIntArray(fgets($pFile))) {
            $this->assertTrue($intArray === $intResultArray);
        }
        fclose($pFile);
    }

    /**
     * @covers \BreakpointDebugging_InAllCase<extended>
     */
    public function testAutoload()
    {
        global $testAutoload;

        if ($testAutoload === 2) { // In case of accessing to static member.
            ob_start();
            \NativeClass::publicStaticFunction();
            ob_end_clean();
        }

        if ($testAutoload === 3) { // In case of creating new instance.
            new \NativeClass();
        }
    }

    /**
     * @covers \BreakpointDebugging_InAllCase<extended>
     */
    public function testExceptionHandler()
    {
        ob_start();
        $pPrevious = new \Exception('Previous exception.', E_USER_ERROR);
        $pException = new \Exception('Exception.', E_USER_ERROR, $pPrevious);
        B::exceptionHandler($pException);
        $this->assertTrue(ob_get_clean() !== '');
    }

    /**
     * @covers \BreakpointDebugging_InAllCase<extended>
     */
    public function testErrorHandler()
    {
        ob_start();
        B::errorHandler(E_USER_ERROR, 'Error test.');
        $this->assertTrue(ob_get_clean() !== '');
    }

    /**
     * @covers \BreakpointDebugging_InAllCase<extended>
     *
     * @expectedException        \PHPUnit_Framework_Error
     * @expectedExceptionMessage CLASS=BreakpointDebugging_InAllCaseTest FUNCTION=testInternalAssert ID=1
     */
    public function testInternalAssert()
    {
        B::internalAssert(false, 1);
    }

    /**
     * @covers \BreakpointDebugging_InAllCase<extended>
     *
     * @expectedException        \PHPUnit_Framework_Error
     * @expectedExceptionMessage CLASS=BreakpointDebugging_InAllCaseTest FUNCTION=testInternalException ID=1
     */
    public function testInternalException()
    {
        B::internalException('Tests "internalException()".', 1);
    }

    /**
     * @covers \BreakpointDebugging_InAllCase<extended>
     */
    public function testShutdown()
    {
        global $_BreakpointDebugging;

        // Emulates this page shutdown.
        \BreakpointDebugging_InAllCase::shutdown();
        $this->assertTrue(is_object($_BreakpointDebugging));
    }

}

?>
