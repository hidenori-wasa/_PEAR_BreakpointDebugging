<?php

chdir(__DIR__ . '/../../');
require_once './PEAR_Setting/BreakpointDebugging_MySetting.php';

use \BreakpointDebugging as B;

B::checkUnitTestExeMode();
class BreakpointDebuggingTestExampleBase
{
    private static $privateStaticBase = 'private static base';
    private $privateAutoBase = 'private auto base';
    protected static $protectedStaticBase = 'protected static base';
    protected $protectedAutoBase = 'protected auto base';

}

class BreakpointDebuggingTestExample extends \BreakpointDebuggingTestExampleBase
{
    const CONSTANT_TEST = 123;

    private static $privateStatic = 'private static';
    private $privateAuto = 'private auto';

}

/**
 * Test class for BreakpointDebugging.
 * Generated by PHPUnit on 2012-09-30 at 16:24:29.
 */
class BreakpointDebuggingTest extends \BreakpointDebugging_UnitTestOverriding
{
    /**
     * @covers BreakpointDebugging::breakpoint
     *
     * @expectedException        \PHPUnit_Framework_Error
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=breakpoint ID=1
     */
    public function testBreakpoint_A()
    {
        B::breakpoint('dummy', 'dummy', 'dummy');
    }

    /**
     * @covers BreakpointDebugging::breakpoint
     *
     * @expectedException        \PHPUnit_Framework_Error
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=breakpoint ID=2
     */
    public function testBreakpoint_B()
    {
        B::breakpoint(1, array ());
    }

    /**
     * @covers BreakpointDebugging::breakpoint
     *
     * @expectedException        \PHPUnit_Framework_Error
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=breakpoint ID=3
     */
    public function testBreakpoint_C()
    {
        B::breakpoint('', 1);
    }

    /**
     * @covers BreakpointDebugging::breakpoint
     */
    public function testBreakpoint_D()
    {
        B::breakpoint('', array ());
    }

    /**
     * @covers BreakpointDebugging::convertMbStringForDebug
     */
    public function testConvertMbStringForDebug()
    {
        $testArray = array (2, "\xE6\x96\x87\xE5\xAD\x97 ");
        $debugValues = B::convertMbStringForDebug('SJIS', 1, $testArray, "\xE6\x96\x87\xE5\xAD\x97 ");
        $cmpArray = array (1, array (2, "\x95\xB6\x8E\x9A "), "\x95\xB6\x8E\x9A ");
        $this->assertTrue($debugValues === $cmpArray);
    }

    /**
     * @covers BreakpointDebugging::iniSet
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=iniSet ID=4
     */
    public function testIniSet_A()
    {
        // First parameter does not exist.
        B::iniSet('not_exist', 'true');
    }

    /**
     * @covers BreakpointDebugging::iniSet
     *
     * @expectedException        \PHPUnit_Framework_Error
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=iniSet ID=3
     */
    public function testIniSet_B()
    {
        // Second parameter is not character string.
        B::iniSet('default_charset', 8);
    }

    /**
     * @covers BreakpointDebugging::getPropertyForTest
     */
    public function testGetPropertyForTest_A()
    {
        $pBreakpointDebuggingTestExample = new \BreakpointDebuggingTestExample();

        $this->assertTrue(B::getPropertyForTest('BreakpointDebuggingTestExample', 'CONSTANT_TEST') === 123); // Constant property.
        $this->assertTrue(B::getPropertyForTest('BreakpointDebuggingTestExample', '$privateStatic') === 'private static'); // Private static property.
        $this->assertTrue(B::getPropertyForTest($pBreakpointDebuggingTestExample, '$privateAuto') === 'private auto'); // Private auto property.
    }

    /**
     * @covers BreakpointDebugging::getPropertyForTest
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=getPropertyForTest
     */
    public function testGetPropertyForTest_B()
    {
        B::getPropertyForTest('BreakpointDebuggingTestExample', '$privateStaticBase'); // Private static property of base class.
    }

    /**
     * @covers BreakpointDebugging::getPropertyForTest
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=getPropertyForTest
     */
    public function testGetPropertyForTest_C()
    {
        $pBreakpointDebuggingTestExample = new \BreakpointDebuggingTestExample();

        B::getPropertyForTest($pBreakpointDebuggingTestExample, '$privateStaticBase'); // Private static property of base class.
    }

    /**
     * @covers BreakpointDebugging::setPropertyForTest
     */
    public function testSetPropertyForTest_A()
    {
        $pBreakpointDebuggingTestExample = new \BreakpointDebuggingTestExample();

        B::setPropertyForTest('\BreakpointDebuggingTestExample', '$privateStatic', 'Changed private static.'); // Private static property.
        $this->assertTrue(B::getPropertyForTest('\BreakpointDebuggingTestExample', '$privateStatic') === 'Changed private static.');
        B::setPropertyForTest($pBreakpointDebuggingTestExample, '$privateStatic', 'Changed private static 2.'); // Private static property.
        $this->assertTrue(B::getPropertyForTest($pBreakpointDebuggingTestExample, '$privateStatic') === 'Changed private static 2.');
        B::setPropertyForTest($pBreakpointDebuggingTestExample, '$privateAuto', 'Changed private auto 2.'); // Private auto property.
        $this->assertTrue(B::getPropertyForTest($pBreakpointDebuggingTestExample, '$privateAuto') === 'Changed private auto 2.');
        B::setPropertyForTest('\BreakpointDebuggingTestExample', '$protectedStaticBase', 'Changed protected static base.'); // Protected static base property.
        $this->assertTrue(B::getPropertyForTest('\BreakpointDebuggingTestExample', '$protectedStaticBase') === 'Changed protected static base.');
        B::setPropertyForTest($pBreakpointDebuggingTestExample, '$protectedStaticBase', 'Changed protected static base 2.'); // Protected static base property.
        $this->assertTrue(B::getPropertyForTest($pBreakpointDebuggingTestExample, '$protectedStaticBase') === 'Changed protected static base 2.');
        B::setPropertyForTest($pBreakpointDebuggingTestExample, '$protectedAutoBase', 'Changed protected auto base 2.'); // Protected auto base property.
        $this->assertTrue(B::getPropertyForTest($pBreakpointDebuggingTestExample, '$protectedAutoBase') === 'Changed protected auto base 2.');
    }

    /**
     * @covers BreakpointDebugging::setPropertyForTest
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=setPropertyForTest
     */
    public function testSetPropertyForTest_B()
    {
        global $_BreakpointDebugging;

        $pBreakpointDebuggingTestExample = new \BreakpointDebuggingTestExample();

        B::setPropertyForTest($pBreakpointDebuggingTestExample, '$privateStaticBase', 'change'); // Private static property of base class.
    }

    /**
     * @covers BreakpointDebugging::setPropertyForTest
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=setPropertyForTest
     */
    public function testSetPropertyForTest_C()
    {
        global $_BreakpointDebugging;

        $pBreakpointDebuggingTestExample = new \BreakpointDebuggingTestExample();

        B::setPropertyForTest($pBreakpointDebuggingTestExample, '$privateAutoBase', 'change'); // Private auto property of base class.
    }

    /**
     * @covers BreakpointDebugging::checkUnitTestExeMode
     */
    public function testCheckUnitTestExeMode()
    {
        B::checkUnitTestExeMode();
    }

    /**
     * @covers BreakpointDebugging::displayVerification
     */
    public function testDisplayVerification()
    {
        global $_BreakpointDebugging;

        $mandate = "January 01 2000";
        ob_start();
        $return = $_BreakpointDebugging->displayVerification('sscanf', array ($mandate, "%s %d %d", &$month, &$day, &$year));
        $this->assertTrue($return === 3);
        $this->assertTrue($month === 'January');
        $this->assertTrue($day === 1);
        $this->assertTrue($year === 2000);
        $this->assertTrue(ob_get_clean() !== '');
    }

    /**
     * @covers BreakpointDebugging::testExecuteUnitTest
     */
    public function testExecuteUnitTest_A()
    {
        ob_start();

        $testFileNames = array (
            '--stop-on-failure --strict ExampleTest.php',
            '--stop-on-failure --strict ExampleTest.php',
        );
        // Executes unit tests.
        B::executeUnitTest($testFileNames, __DIR__);

        ob_clean();
    }

    /**
     * @covers BreakpointDebugging::testExecuteUnitTest
     *
     * @expectedException        \PHPUnit_Framework_Error
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=executeUnitTest ID=1
     */
    public function testExecuteUnitTest_B()
    {
        B::executeUnitTest(1, __DIR__);
    }

    /**
     * @covers BreakpointDebugging::testExecuteUnitTest
     *
     * @expectedException        \PHPUnit_Framework_Error_Warning
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=executeUnitTest ID=2
     */
    public function testExecuteUnitTest_C()
    {
        B::executeUnitTest(array (), 1);
    }

    /**
     * @covers BreakpointDebugging::testExecuteUnitTest
     *
     * @expectedException        \PHPUnit_Framework_Error
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=executeUnitTest ID=3
     */
    public function testExecuteUnitTest_D()
    {
        B::executeUnitTest('dummy', 'dummy', 'dummy');
    }

}

?>
