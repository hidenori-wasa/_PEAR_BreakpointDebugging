<?php

chdir(__DIR__ . '/../../');
require_once './BreakpointDebugging_Including.php';

use \BreakpointDebugging as B;

B::isUnitTestExeMode(true);
class BreakpointDebuggingTestExampleBase
{
    private static $privateStaticBase = 'private static base';
    private $privateAutoBase = 'private auto base';
    protected static $protectedStaticBase = 'protected static base';
    protected $protectedAutoBase = 'protected auto base';

}

class BreakpointDebuggingTestExample extends \BreakpointDebuggingTestExampleBase
{
    const CONSTANT_TEST = 123;

    private static $privateStatic = 'private static';
    private $privateAuto = 'private auto';

}

/**
 * Test class for BreakpointDebugging.
 * Generated by PHPUnit on 2012-09-30 at 16:24:29.
 */
class BreakpointDebuggingTest extends \BreakpointDebugging_UnitTestOverriding
{
    private static $_exeMode;

    static function setUpBeforeClass()
    {
        self::$_exeMode = &B::refStatic('$exeMode');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     */
    function testInitialize()
    {
        \BreakpointDebugging::initialize();
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=initialize
     */
    function testInitialize_B()
    {
        \BreakpointDebugging::initialize('notExist');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     */
    function testRefAndGetStatic()
    {
        $userName = &B::refStatic('$_userName');
        $this->assertTrue($userName !== 'hidenori');
        $userName = 'hidenori';
        $this->assertTrue($userName === 'hidenori');
        $this->assertTrue(B::getStatic('$_userName') === 'hidenori');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \PHPUnit_Framework_Error_Warning
     * @expectedExceptionMessage Missing argument 1 for BreakpointDebugging::getStatic()
     */
    function testGetStatic_A()
    {
        B::getStatic();
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=getStatic ID=1
     */
    function testGetStatic_B()
    {
        B::getStatic('dummy', 'notExitst');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \PHPUnit_Framework_Error_Warning
     * @expectedExceptionMessage Missing argument 1 for BreakpointDebugging::refStatic()
     */
    function testRefStatic_A()
    {
        B::refStatic();
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=refStatic ID=1
     */
    function testRefStatic_B()
    {
        B::refStatic('$_userName', 'notExitst');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \PHPUnit_Framework_Error_Notice
     * @expectedExceptionMessage Undefined offset: 123
     */
    function testRefStatic_C()
    {
        B::refStatic(123);
    }

    /**
     * @covers \BreakpointDebugging<extended>
     */
    function testGetXebugExists_A()
    {
        B::getXebugExists();
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=getXebugExists
     */
    function testGetXebugExists_B()
    {
        B::getXebugExists('notExist');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     */
    function testSetXebugExists_A()
    {
        B::setXebugExists(false);
        B::setXebugExists(true);
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \PHPUnit_Framework_Error_Warning
     * @expectedExceptionMessage Missing argument 1 for BreakpointDebugging::setXebugExists()
     */
    function testSetXebugExists_B()
    {
        B::setXebugExists();
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=setXebugExists ID=1
     */
    function testSetXebugExists_C()
    {
        B::setXebugExists('dummy', 'notExist');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=setXebugExists ID=2
     */
    function testSetXebugExists_D()
    {
        B::setXebugExists('incorrectType');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     */
    function testIniCheck_A()
    {
        B::iniCheck('safe_mode', '', '');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \PHPUnit_Framework_Error_Warning
     * @expectedExceptionMessage Missing argument 3 for BreakpointDebugging::iniCheck()
     */
    function testIniCheck_B()
    {
        B::iniCheck('dummy', 'dummy');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=iniCheck ID=1
     */
    function testIniCheck_C()
    {
        B::iniCheck('dummy', 'dummy', 'dummy', 'notExist');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=iniCheck ID=2
     */
    function testIniCheck_D()
    {
        B::iniCheck(123, 'dummy', 'dummy');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=iniCheck ID=3
     */
    function testIniCheck_E()
    {
        B::iniCheck('dummy', 123, 'dummy');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=iniCheck ID=4
     */
    function testIniCheck_F()
    {
        B::iniCheck('dummy', 'dummy', 123);
    }

    /**
     * @covers \BreakpointDebugging<extended>
     */
    function testConvertMbString_A()
    {
        B::convertMbString('A character string.');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \PHPUnit_Framework_Error_Warning
     * @expectedExceptionMessage Missing argument 1 for BreakpointDebugging::convertMbString()
     */
    function testConvertMbString_B()
    {
        B::convertMbString();
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=convertMbString ID=1
     */
    function testConvertMbString_C()
    {
        B::convertMbString('dummy', 'notExist');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=convertMbString ID=2
     */
    function testConvertMbString_D()
    {
        B::convertMbString(123);
    }

    /**
     * @covers \BreakpointDebugging<extended>
     */
    function testMkdir_A()
    {
        $testDir = B::getStatic('$_workDir') . '/TestMkDir';
        if (is_dir($testDir)) {
            rmdir($testDir);
        }
        B::mkdir($testDir);
        rmdir($testDir);
        B::mkdir($testDir, 0700);
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \PHPUnit_Framework_Error_Warning
     * @expectedExceptionMessage Missing argument 1 for BreakpointDebugging::mkdir()
     */
    function testMkdir_B()
    {
        B::mkdir();
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=mkdir ID=1
     */
    function testMkdir_C()
    {
        B::mkdir('dummy', 'dummy', 'notExist');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=mkdir ID=2
     */
    function testMkdir_D()
    {
        B::mkdir(123);
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=mkdir ID=3
     */
    function testMkdir_E()
    {
        B::mkdir('dummy', 'incorrectType');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     */
    function testFopen_A()
    {
        $testFileName = B::getStatic('$_workDir') . '/TestFile.txt';
        $pFile = B::fopen($testFileName, 'wb', 0700);
        fclose($pFile);
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \PHPUnit_Framework_Error_Warning
     * @expectedExceptionMessage Missing argument 3 for BreakpointDebugging::fopen()
     */
    function testFopen_B()
    {
        B::fopen('dummy', 'dummy');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=fopen ID=1
     */
    function testFopen_C()
    {
        B::fopen('dummy', 'dummy', 'dummy', 'notExist');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=fopen ID=2
     */
    function testFopen_D()
    {
        B::fopen(123, 'dummy', 'dummy');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=fopen ID=3
     */
    function testFopen_E()
    {
        B::fopen('dummy', 123, 'dummy');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=fopen ID=4
     */
    function testFopen_F()
    {
        B::fopen('dummy', 'dummy', 'incorrectType');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=fopen ID=4
     */
    function testFopen_G()
    {
        B::fopen('dummy', 'dummy', -1);
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=fopen ID=4
     */
    function testFopen_H()
    {
        B::fopen('dummy', 'dummy', 01000);
    }

    /**
     * @covers \BreakpointDebugging<extended>
     */
    function testCompressIntArray_A()
    {
        B::compressIntArray(array (1, 2));
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \PHPUnit_Framework_Error_Warning
     * @expectedExceptionMessage Missing argument 1 for BreakpointDebugging::compressIntArray()
     */
    function testCompressIntArray_B()
    {
        B::compressIntArray();
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=compressIntArray ID=1
     */
    function testCompressIntArray_C()
    {
        B::compressIntArray('dummy', 'notExist');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=compressIntArray ID=2
     */
    function testCompressIntArray_D()
    {
        B::compressIntArray('incorrectType');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     */
    function testDecompressIntArray_A()
    {
        B::decompressIntArray(false);
        B::decompressIntArray('A character string.');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \PHPUnit_Framework_Error_Warning
     * @expectedExceptionMessage Missing argument 1 for BreakpointDebugging::decompressIntArray()
     */
    function testDecompressIntArray_B()
    {
        B::decompressIntArray();
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=decompressIntArray ID=1
     */
    function testDecompressIntArray_C()
    {
        B::decompressIntArray('dummy', 'notExist');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=decompressIntArray ID=2
     */
    function testDecompressIntArray_D()
    {
        B::decompressIntArray(123);
    }

    /**
     * @covers \BreakpointDebugging<extended>
     */
    function testExceptionHandler_A()
    {
        ob_start();
        self::$_exeMode |= B::IGNORING_BREAK_POINT;
        B::handleException(new \Exception());
        self::$_exeMode &= ~B::IGNORING_BREAK_POINT;
        ob_end_clean();
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \PHPUnit_Framework_Error_Warning
     * @expectedExceptionMessage Missing argument 1 for BreakpointDebugging::handleException()
     */
    function testExceptionHandler_B()
    {
        B::handleException();
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=handleException ID=1
     */
    function testExceptionHandler_C()
    {
        B::handleException('dummy', 'notExist');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=handleException ID=2
     */
    function testExceptionHandler_D()
    {
        B::handleException('incorrectType');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     */
    function testErrorHandler_A()
    {
        ob_start();
        self::$_exeMode |= B::IGNORING_BREAK_POINT;
        B::handleError(E_USER_ERROR, 'dummy');
        self::$_exeMode &= ~B::IGNORING_BREAK_POINT;
        ob_end_clean();
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \PHPUnit_Framework_Error_Warning
     * @expectedExceptionMessage Missing argument 2 for BreakpointDebugging::handleError()
     */
    function testErrorHandler_B()
    {
        B::handleError('dummy');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=handleError ID=2
     */
    function testErrorHandler_D()
    {
        B::handleError('incorrectType', 'dummy');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=handleError ID=3
     */
    function testErrorHandler_E()
    {
        B::handleError(123, 123);
    }

    /**
     * @covers \BreakpointDebugging<extended>
     */
    public function testBreakpoint_A()
    {
        //B::breakpoint('dummy', debug_backtrace() array ('notEmpty'));
        $callStack = debug_backtrace();
        array_shift($callStack);
        B::breakpoint('dummy', $callStack);
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \PHPUnit_Framework_Error_Warning
     * @expectedExceptionMessage Missing argument 2 for BreakpointDebugging::breakpoint()
     */
    public function testBreakpoint_B()
    {
        B::breakpoint('dummy');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=breakpoint ID=1
     */
    public function testBreakpoint_C()
    {
        B::breakpoint('dummy', 'dummy', 'notExist');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=breakpoint ID=2
     */
    public function testBreakpoint_D()
    {
        B::breakpoint(123, array ());
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=breakpoint ID=3
     */
    public function testBreakpoint_E()
    {
        B::breakpoint('dummy', 123);
    }

    function limitAccess_A1()
    {
        B::limitAccess('tests/PEAR/BreakpointDebuggingTest.php');
    }

    function limitAccess_A2()
    {
        B::limitAccess('tests/PEAR/BreakpointDebuggingTest.php', true);
    }

    function limitAccess_A3()
    {
        $includePaths = &B::refStatic('$_includePaths');
        $storeIncludePaths = $includePaths;
        $includePaths = null;
        B::limitAccess('tests/PEAR/BreakpointDebuggingTest.php');
        $includePaths = $storeIncludePaths;
    }

    function limitAccess_A4()
    {
        $includePaths = &B::refStatic('$_includePaths');
        $storeIncludePaths = $includePaths;
        $includePaths = null;
        B::limitAccess('tests/PEAR/BreakpointDebuggingTest.php', true);
        $includePaths = $storeIncludePaths;
    }

    /**
     * @covers \BreakpointDebugging<extended>
     */
    function testLimitAccess_A()
    {
        $this->limitAccess_A1();
        $this->limitAccess_A2();
        $this->limitAccess_A3();
        $this->limitAccess_A4();
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \PHPUnit_Framework_Error_Warning
     * @expectedExceptionMessage Missing argument 1 for BreakpointDebugging::limitAccess()
     */
    function testLimitAccess_B()
    {
        B::limitAccess();
    }

    function limitAccess_C()
    {
        B::limitAccess('dummy', 'dummy', 'notExist');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=limitAccess ID=1
     */
    function testLimitAccess_C()
    {
        $this->limitAccess_C();
    }

    function limitAccess_D()
    {
        B::limitAccess(123, 'dummy');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=limitAccess ID=2
     */
    function testLimitAccess_D()
    {
        $this->limitAccess_D();
    }

    function limitAccess_E()
    {
        B::limitAccess('dummy', 'incorrectType');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=limitAccess ID=3
     */
    function testLimitAccess_E()
    {
        $this->limitAccess_E();
    }

    function limitAccess_F()
    {
        B::limitAccess('NotExistPath', true);
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebuggingTest FUNCTION=limitAccess_F ID=4
     */
    function testLimitAccess_F()
    {
        $this->limitAccess_F();
    }

    /**
     * @covers \BreakpointDebugging<extended>
     */
    public function testAssert_A()
    {
        B::assert(true);
        B::assert(true, 123);
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \PHPUnit_Framework_Error_Warning
     * @expectedExceptionMessage Missing argument 1 for BreakpointDebugging::assert()
     */
    public function testAssert_B()
    {
        B::assert();
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebuggingTest FUNCTION=testAssert_C ID=1
     */
    public function testAssert_C()
    {
        B::assert('dummy', 'dummy', 'notExist');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebuggingTest FUNCTION=testAssert_D ID=2
     */
    public function testAssert_D()
    {
        B::assert('incorrectType');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebuggingTest FUNCTION=testAssert_E ID=3
     */
    public function testAssert_E()
    {
        B::assert(true, 'incorrectType');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     */
    public function testConvertMbStringForDebug()
    {
        $testArray = array (2, "\xE6\x96\x87\xE5\xAD\x97 ");
        $debugValues = B::convertMbStringForDebug('SJIS', 1, $testArray, "\xE6\x96\x87\xE5\xAD\x97 ");
        $cmpArray = array (1, array (2, "\x95\xB6\x8E\x9A "), "\x95\xB6\x8E\x9A ");
        $this->assertTrue($debugValues === $cmpArray);

        $storeExeMode = self::$_exeMode;
        self::$_exeMode = B::REMOTE_DEBUG | B::UNIT_TEST;
        B::convertMbStringForDebug('SJIS', 1, $testArray, "\xE6\x96\x87\xE5\xAD\x97 ");
        self::$_exeMode = $storeExeMode;
    }

    /**
     * @covers \BreakpointDebugging<extended>
     */
    public function testIniSet_A()
    {
        B::iniSet('default_charset', 'sjis');
        B::iniSet('default_charset', 'sjis');

        $storeExeMode = self::$_exeMode;
        self::$_exeMode = B::REMOTE_DEBUG | B::UNIT_TEST;
        B::iniSet('default_charset', 'utf8');
        self::$_exeMode = $storeExeMode;
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \PHPUnit_Framework_Error_Warning
     * @expectedExceptionMessage Missing argument 2 for BreakpointDebugging::iniSet()
     */
    public function testIniSet_B()
    {
        B::iniSet('dummy');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=iniSet ID=1
     */
    public function testIniSet_C()
    {
        B::iniSet('dummy', 'dummy', 'dummy', 'notExist');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=iniSet ID=2
     */
    public function testIniSet_D()
    {
        B::iniSet('error_log', 'dummy');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=iniSet ID=3
     */
    public function testIniSet_E()
    {
        B::iniSet(123, 'dummy');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=iniSet ID=4
     */
    public function testIniSet_F()
    {
        B::iniSet('dummy', 123);
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=iniSet ID=5
     */
    public function testIniSet_G()
    {
        B::iniSet('dummy', 'dummy', 'incorrectType');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=iniSet ID=6
     */
    public function testIniSet_H()
    {
        B::iniSet('doc_root', 'dummy');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=iniSet ID=6
     */
    public function testIniSet_I()
    {
        B::iniSet('not_exist', 'true');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     */
    public function testGetPropertyForTest_A()
    {
        $pBreakpointDebuggingTestExample = new \BreakpointDebuggingTestExample();

        $this->assertTrue(B::getPropertyForTest('BreakpointDebuggingTestExample', 'CONSTANT_TEST') === 123); // Constant property.
        $this->assertTrue(B::getPropertyForTest('BreakpointDebuggingTestExample', '$privateStatic') === 'private static'); // Private static property.
        $this->assertTrue(B::getPropertyForTest($pBreakpointDebuggingTestExample, '$privateStatic') === 'private static'); // Private static property.
        $this->assertTrue(B::getPropertyForTest($pBreakpointDebuggingTestExample, '$privateAuto') === 'private auto'); // Private auto property.
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \PHPUnit_Framework_Error_Warning
     * @expectedExceptionMessage Missing argument 2 for BreakpointDebugging::getPropertyForTest()
     */
    public function testGetPropertyForTest_B()
    {
        B::getPropertyForTest('dummy');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=getPropertyForTest ID=1
     */
    public function testGetPropertyForTest_C()
    {
        B::getPropertyForTest('dummy', 'dummy', 'notExist');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=getPropertyForTest ID=2
     */
    public function testGetPropertyForTest_D()
    {
        B::getPropertyForTest('dummy', 123);
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=getPropertyForTest ID=3
     */
    public function testGetPropertyForTest_E()
    {
        B::getPropertyForTest(123, 'dummy');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \PHPUnit_Framework_Error_Warning
     * @expectedExceptionMessage failed to open stream: No such file or directory
     */
    public function testGetPropertyForTest_F()
    {
        B::getPropertyForTest('notExistClassName', 'dummy');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=getPropertyForTest ID=4
     */
    public function testGetPropertyForTest_G()
    {
        B::getPropertyForTest('BreakpointDebuggingTestExample', 'notExistPropertyName');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=getPropertyForTest ID=4
     */
    public function testGetPropertyForTest_H()
    {
        B::getPropertyForTest('BreakpointDebuggingTestExample', '$privateStaticBase'); // Private static property of base class.
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=getPropertyForTest
     */
    public function testGetPropertyForTest_I()
    {
        $pBreakpointDebuggingTestExample = new \BreakpointDebuggingTestExample();

        B::getPropertyForTest($pBreakpointDebuggingTestExample, '$privateStaticBase'); // Private static property of base class.
    }

    /**
     * @covers \BreakpointDebugging<extended>
     */
    public function testSetPropertyForTest_A()
    {
        $pBreakpointDebuggingTestExample = new \BreakpointDebuggingTestExample();

        B::setPropertyForTest('\BreakpointDebuggingTestExample', '$privateStatic', 'Changed private static.'); // Private static property.
        $this->assertTrue(B::getPropertyForTest('\BreakpointDebuggingTestExample', '$privateStatic') === 'Changed private static.');
        B::setPropertyForTest($pBreakpointDebuggingTestExample, '$privateStatic', 'Changed private static 2.'); // Private static property.
        $this->assertTrue(B::getPropertyForTest($pBreakpointDebuggingTestExample, '$privateStatic') === 'Changed private static 2.');
        B::setPropertyForTest($pBreakpointDebuggingTestExample, '$privateAuto', 'Changed private auto 2.'); // Private auto property.
        $this->assertTrue(B::getPropertyForTest($pBreakpointDebuggingTestExample, '$privateAuto') === 'Changed private auto 2.');
        B::setPropertyForTest('\BreakpointDebuggingTestExample', '$protectedStaticBase', 'Changed protected static base.'); // Protected static base property.
        $this->assertTrue(B::getPropertyForTest('\BreakpointDebuggingTestExample', '$protectedStaticBase') === 'Changed protected static base.');
        B::setPropertyForTest($pBreakpointDebuggingTestExample, '$protectedStaticBase', 'Changed protected static base 2.'); // Protected static base property.
        $this->assertTrue(B::getPropertyForTest($pBreakpointDebuggingTestExample, '$protectedStaticBase') === 'Changed protected static base 2.');
        B::setPropertyForTest($pBreakpointDebuggingTestExample, '$protectedAutoBase', 'Changed protected auto base 2.'); // Protected auto base property.
        $this->assertTrue(B::getPropertyForTest($pBreakpointDebuggingTestExample, '$protectedAutoBase') === 'Changed protected auto base 2.');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \PHPUnit_Framework_Error_Warning
     * @expectedExceptionMessage Missing argument 3 for BreakpointDebugging::setPropertyForTest()
     */
    function testSetPropertyForTest_B()
    {
        B::setPropertyForTest('dummy', 'dummy');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=setPropertyForTest ID=1
     */
    function testSetPropertyForTest_C()
    {
        B::setPropertyForTest('dummy', 'dummy', 'dummy', 'notExist');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=setPropertyForTest ID=2
     */
    function testSetPropertyForTest_D()
    {
        B::setPropertyForTest('dummy', 123, 'dummy');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=setPropertyForTest ID=3
     */
    function testSetPropertyForTest_E()
    {
        B::setPropertyForTest(123, 'dummy', 'dummy');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=setPropertyForTest ID=4
     */
    function testSetPropertyForTest_F()
    {
        $pBreakpointDebuggingTestExample = new \BreakpointDebuggingTestExample();

        B::setPropertyForTest($pBreakpointDebuggingTestExample, '$privateStaticBase', 'change'); // Private static property of base class.
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=setPropertyForTest ID=4
     */
    public function testSetPropertyForTest_G()
    {
        $pBreakpointDebuggingTestExample = new \BreakpointDebuggingTestExample();

        B::setPropertyForTest($pBreakpointDebuggingTestExample, '$privateAutoBase', 'change'); // Private auto property of base class.
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=setPropertyForTest ID=4
     */
    public function testSetPropertyForTest_H()
    {
        $pBreakpointDebuggingTestExample = new \BreakpointDebuggingTestExample();

        B::setPropertyForTest($pBreakpointDebuggingTestExample, '$notExistPropertyName', 'change');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     */
    public function testIsUnitTestExeMode_A()
    {
        B::setPropertyForTest('BreakpointDebugging', '$_unitTestDir', null);
        B::isUnitTestExeMode(true);

        if (!array_key_exists('SERVER_ADDR', $_SERVER)) {
            $storeServer = null;
        } else {
            $storeServer = $_SERVER['SERVER_ADDR'];
        }
        $_SERVER['SERVER_ADDR'] = '127.0.0.2';

        $storeExeMode = self::$_exeMode;
        self::$_exeMode = B::REMOTE_DEBUG | B::UNIT_TEST;
        B::isUnitTestExeMode(true);
        self::$_exeMode = $storeExeMode;

        $_SERVER['SERVER_ADDR'] = $storeServer;
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \PHPUnit_Framework_Error_Warning
     * @expectedExceptionMessage Missing argument 1 for BreakpointDebugging::isUnitTestExeMode()
     */
    public function testIsUnitTestExeMode_B()
    {
        B::isUnitTestExeMode();
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=isUnitTestExeMode ID=1
     */
    public function testIsUnitTestExeMode_C()
    {
        B::isUnitTestExeMode('dummy', 'notExist');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=isUnitTestExeMode ID=2
     */
    public function testIsUnitTestExeMode_D()
    {
        B::isUnitTestExeMode('incorrectType');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     */
    public function testExecuteUnitTest_A()
    {
        ob_start();

        $testFileNames = array (
            '--stop-on-failure --strict ExampleTest.php',
            '--stop-on-failure --strict ExampleTest.php',
        );
        B::executeUnitTest($testFileNames);

        $testFileNames = array (
            '--stop-on-failure --strict Example_Test.php',
            '--stop-on-failure --strict Example_Test.php',
        );
        B::executeUnitTest($testFileNames);

        ob_end_clean();
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \PHPUnit_Framework_Error_Warning
     * @expectedExceptionMessage Missing argument 1 for BreakpointDebugging::executeUnitTest()
     */
    public function testExecuteUnitTest_B()
    {
        B::executeUnitTest();
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=executeUnitTest ID=1
     */
    public function testExecuteUnitTest_C()
    {
        B::executeUnitTest('dummy', 'notExist');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=executeUnitTest ID=2
     */
    public function testExecuteUnitTest_D()
    {
        B::executeUnitTest('incorrectType');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=executeUnitTest ID=3
     */
    public function testExecuteUnitTest_E()
    {
        B::executeUnitTest(array ());
    }

    /**
     * @covers \BreakpointDebugging<extended>
     */
    public function testExecuteUnitTest_F()
    {
        $testFileNames = array (
            '--stop-on-failure --strict NotExistTest.php',
            '--stop-on-failure --strict NotExistTest.php',
        );
        ob_start();
        // Executes unit tests.
        B::executeUnitTest($testFileNames);
        ob_end_clean();
    }

    /**
     * @covers \BreakpointDebugging<extended>
     */
    public function testDisplayCodeCoverageReport_A()
    {
        ob_start();
        B::displayCodeCoverageReport('BreakpointDebugging/OverrideClassTest.php', 'PEAR/BreakpointDebugging/OverrideClass.php');
        B::displayCodeCoverageReport('BreakpointDebugging/OverrideClassTest.php', array ('PEAR/BreakpointDebugging/OverrideClass.php'));
        ob_end_clean();
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \PHPUnit_Framework_Error_Warning
     * @expectedExceptionMessage Missing argument 2 for BreakpointDebugging::displayCodeCoverageReport()
     */
    public function testDisplayCodeCoverageReport_B()
    {
        B::displayCodeCoverageReport('dummy');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=displayCodeCoverageReport ID=1
     */
    public function testDisplayCodeCoverageReport_C()
    {
        B::displayCodeCoverageReport('dummy', 'dummy', 'notExist');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=displayCodeCoverageReport ID=2
     */
    public function testDisplayCodeCoverageReport_D()
    {
        B::displayCodeCoverageReport(123, 'dummy');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=displayCodeCoverageReport ID=3
     */
    public function testDisplayCodeCoverageReport_E()
    {
        B::displayCodeCoverageReport('dummy', 123);
    }

    /**
     * @covers \BreakpointDebugging<extended>
     */
    public function testDisplayVerification_A()
    {
        $mandate = "January 01 2000";
        ob_start();
        $return = B::displayVerification('sscanf', array ($mandate, "%s %d %d", &$month, &$day, &$year));
        $this->assertTrue($return === 3);
        $this->assertTrue($month === 'January');
        $this->assertTrue($day === 1);
        $this->assertTrue($year === 2000);
        $this->assertTrue(ob_get_clean() !== '');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \PHPUnit_Framework_Error_Warning
     * @expectedExceptionMessage Missing argument 2 for BreakpointDebugging::displayVerification()
     */
    public function testDisplayVerification_B()
    {
        B::displayVerification('dummy');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=displayVerification ID=1
     */
    public function testDisplayVerification_C()
    {
        B::displayVerification('dummy', 'dummy', 'notExist');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=displayVerification ID=2
     */
    public function testDisplayVerification_D()
    {
        B::displayVerification(123, 'dummy');
    }

    /**
     * @covers \BreakpointDebugging<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging FUNCTION=displayVerification ID=3
     */
    public function testDisplayVerification_E()
    {
        B::displayVerification('dummy', 'incorrectType');
    }

}

?>
