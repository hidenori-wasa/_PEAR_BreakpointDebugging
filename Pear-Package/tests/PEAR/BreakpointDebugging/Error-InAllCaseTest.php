<?php

chdir(__DIR__ . '/../../../');
require_once './PEAR_Setting/BreakpointDebugging_MySetting.php';

// File to have "use" keyword does not inherit scope into a file including itself,
// also it does not inherit scope into a file including,
// and moreover "use" keyword alias has priority over class definition,
// therefore "use" keyword alias does not be affected by other files.
use \BreakpointDebugging as B;

B::isUnitTestExeMode(true);
class nesting
{
    public $nestingObject;

}

/**
 * Test class for BreakpointDebugging_Error.
 * Generated by PHPUnit on 2012-10-08 at 13:08:45.
 */
class BreakpointDebugging_Error_InAllCaseTest extends \BreakpointDebugging_UnitTestOverriding
{
    static $error;
    static $exeMode;

    // function test()
    // {
    //     exit('<pre>Stops this test.</pre>');
    // }

    static function setUpBeforeClass()
    {
        self::$exeMode = &B::refStatic('$exeMode');
    }

    function setUp()
    {
        parent::setUp();
        $errorLogDirectory = B::getStatic('$_workDir') . '/ErrorLog/';
        if (is_dir($errorLogDirectory)) {
            $errorLogDirElements = scandir($errorLogDirectory);
            foreach ($errorLogDirElements as $errorLogDirElement) {
                $errorLogDirElementPath = $errorLogDirectory . $errorLogDirElement;
                if (!is_file($errorLogDirElementPath)) {
                    continue;
                }
                // Deletes the error log file, variable configuring file or the error location file.
                unlink($errorLogDirElementPath);
            }
            rmdir($errorLogDirectory);
        }
        self::$error = new \BreakpointDebugging_Error();
    }

    function tearDown()
    {
        self::$exeMode &= ~B::IGNORING_BREAK_POINT;
        if (ob_get_level() === 2) {
            ob_end_clean();
        }
        B::assert(ob_get_level() === 1);
    }

    static function changeExeMode()
    {
        $storeExeMode = self::$exeMode;
        if (self::$exeMode & B::LOCAL_DEBUG) {
            self::$exeMode = B::LOCAL_DEBUG_OF_RELEASE | B::UNIT_TEST;
        } else if (self::$exeMode & B::REMOTE_DEBUG) {
            self::$exeMode = B::RELEASE | B::UNIT_TEST;
        } else {
            $this->fail();
        }
        return $storeExeMode;
    }

    /**
     * @covers \BreakpointDebugging_Error<extended>
     */
    function test__construct()
    {
        new \BreakpointDebugging_Error();

        $storeExeMode = self::changeExeMode();
        new \BreakpointDebugging_Error();
        self::$exeMode = $storeExeMode;

        B::setXebugExists(false);
        new \BreakpointDebugging_Error();
        B::setXebugExists(true);
    }

    /**
     * Gets a file number of a file name in the file of "ErrorLog.var.conf".
     *
     * @param type $fileName File name which was registered in the file of "ErrorLog.var.conf".
     */
    private function _getFileNumber($fileName)
    {
        $fileName = str_replace('\\', '/', $fileName);
        $pFile = fopen(B::getStatic('$_workDir') . '/ErrorLog/ErrorLog.var.conf', 'rb');
        fgets($pFile);
        while ($readFileLine = fgets($pFile)) {
            $readFileName = substr($readFileLine, 0, strrpos($readFileLine, '?'));
            $readFileName = str_replace('\\', '/', $readFileName);
            if (strcasecmp($fileName, $readFileName) === 0) {
                fclose($pFile);
                return rtrim(substr($readFileLine, strrpos($readFileLine, '?') + 1), PHP_EOL);
            }
        }
        fclose($pFile);
        throw new \BreakpointDebugging_ErrorException('', 1);
    }

    /**
     * @covers \BreakpointDebugging_Error<extended>
     */
    function testExceptionHandler2()
    {
        global $line1_, $line2_, $lineA_, $lineB_;

        $testString = 'Test string.';
        B::addValuesToTrace(array ('$testString' => $testString));
        B::addValuesToTrace(array ('$testString' => $testString));
        $maxLogParamNestingLevel = &B::refStatic('$_maxLogParamNestingLevel');
        $maxLogParamNestingLevel = 2;
        $maxLogElementNumber = &B::refStatic('$_maxLogElementNumber');
        $maxLogElementNumber = 2;

        $parentFilePath = __DIR__ . '/testExceptionHandler2_Parent.php';
        include_once $parentFilePath;
        $lineParent = __LINE__ - 1;
        $parentFileNumber = $this->_getFileNumber($parentFilePath);
        $thisFileNumber = $this->_getFileNumber(__FILE__);
        function test2_()
        {
            global $line1_;

            $storeExeMode = \BreakpointDebugging_Error_InAllCaseTest::changeExeMode();
            \BreakpointDebugging_Error_InAllCaseTest::$exeMode |= B::IGNORING_BREAK_POINT;
            for ($count = 0; $count < 2; $count++) {
                \BreakpointDebugging_Error_InAllCaseTest::$error->exceptionHandler2(new \Exception(), B::$prependExceptionLog);
                $line1_ = __LINE__ - 1;
            }
            \BreakpointDebugging_Error_InAllCaseTest::$exeMode &= ~B::IGNORING_BREAK_POINT;
            \BreakpointDebugging_Error_InAllCaseTest::$exeMode = $storeExeMode;
        }

        function test1_()
        {
            global $line2_;

            test2_();
            $line2_ = __LINE__ - 1;
        }

        $storeExeMode = self::changeExeMode();
        self::$exeMode |= B::IGNORING_BREAK_POINT;
        BreakpointDebugging_Error_InAllCaseTest::$error->exceptionHandler2(new \Exception(), B::$prependExceptionLog);
        $line = __LINE__ - 1;
        self::$exeMode &= ~B::IGNORING_BREAK_POINT;
        self::$exeMode = $storeExeMode;
        test1_();
        $line3 = __LINE__ - 1;

        $binData1 = file_get_contents(B::getStatic('$_workDir') . "/ErrorLog/{$parentFileNumber}.bin");

        $cmpBinData1 = rtrim(B::compressIntArray(array ($parentFileNumber, $line__, $thisFileNumber, $lineParent)), PHP_EOL);
        $this->assertTrue(strpos($binData1, $cmpBinData1) !== false);

        $cmpBinData1 = rtrim(B::compressIntArray(array ($parentFileNumber, $lineA_, $parentFileNumber, $lineB_, $parentFileNumber, $lineC_, $thisFileNumber, $lineParent)), PHP_EOL);
        $this->assertTrue(strpos($binData1, $cmpBinData1) !== false);

        $binData2 = file_get_contents(B::getStatic('$_workDir') . "/ErrorLog/{$thisFileNumber}.bin");

        $cmpBinData2 = rtrim(B::compressIntArray(array ($thisFileNumber, $line)), PHP_EOL);
        $this->assertTrue(strpos($binData2, $cmpBinData2) !== false);

        $cmpBinData2 = rtrim(B::compressIntArray(array ($thisFileNumber, $line1_, $thisFileNumber, $line2_, $thisFileNumber, $line3)), PHP_EOL);
        $this->assertTrue(strpos($binData2, $cmpBinData2) !== false);

        B::addValuesToTrace(array ('$parentFileNumber' => $parentFileNumber, '$thisFileNumber' => $thisFileNumber));
        new \BreakpointDebugging_Error();
        $valuesToTrace = &B::refStatic('$_valuesToTrace');
        $valuesToTrace = null;
        function testParentException($nestingArray, $nestingObject)
        {
            throw new \Exception();
        }

        ob_start();
        // Has parent exception, and tests nesting array parameter, and tests nesting object parameter.
        $nestingArray = array (array ('test1', 'test2', 'test3'));
        $nestingObject = new \nesting();
        $nestingObject->nestingObject = new \stdClass();
        try {
            testParentException($nestingArray, $nestingObject);
        } catch (\Exception $e) {
            self::$exeMode |= B::IGNORING_BREAK_POINT;
            self::$error->exceptionHandler2(new \Exception('Test message.', 0, $e), 'Test.');
            self::$exeMode &= ~B::IGNORING_BREAK_POINT;
        }
        // "SJIS" message.
        self::$exeMode |= B::IGNORING_BREAK_POINT;
        self::$error->exceptionHandler2(new \Exception(), "\x95\xB6\x8E\x9A");
        self::$exeMode &= ~B::IGNORING_BREAK_POINT;
        // Called from "BreakpointDebugging_InAllCase::callExceptionHandlerDirectly()" method.
        try {
            self::$exeMode |= B::IGNORING_BREAK_POINT;
            B::assert(false);
        } catch (\Exception $e) {
            self::$exeMode &= ~B::IGNORING_BREAK_POINT;
        }
        ob_end_clean();
    }

    /**
     * @covers \BreakpointDebugging_Error<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging_Error_InAllCase FUNCTION=convertMbString ID=3
     */
    function testExceptionHandler2_B()
    {
        ob_start();
        self::$exeMode |= B::IGNORING_BREAK_POINT;
        // SJIS + UTF-8
        self::$error->exceptionHandler2(new \Exception(), "\x95\xB6\x8E\x9A \xE6\x96\x87\xE5\xAD\x97 ");
    }

    /**
     * @covers \BreakpointDebugging_Error<extended>
     */
    function testExceptionHandler2_C()
    {
        ob_start();
        self::$exeMode |= B::IGNORING_BREAK_POINT;
        // SJIS + UTF-8
        self::$error->exceptionHandler2(new \Exception(), "\x95\xB6\x8E\x9A \xE6\x96\x87\xE5\xAD\x97 ");
        self::$exeMode &= ~B::IGNORING_BREAK_POINT;
        ob_end_clean();
    }

    /**
     * @covers \BreakpointDebugging_Error<extended>
     */
    function testErrorHandler2()
    {
        global $line1, $line2, $lineA, $lineB;
        function errorHandler()
        {
            $storeExeMode = \BreakpointDebugging_Error_InAllCaseTest::changeExeMode();
            \BreakpointDebugging_Error_InAllCaseTest::$exeMode |= B::IGNORING_BREAK_POINT;
            \BreakpointDebugging_Error_InAllCaseTest::$error->errorHandler2(E_USER_ERROR, '', B::$prependErrorLog, debug_backtrace());
            \BreakpointDebugging_Error_InAllCaseTest::$exeMode &= ~B::IGNORING_BREAK_POINT;
            \BreakpointDebugging_Error_InAllCaseTest::$exeMode = $storeExeMode;
        }

        function trigger_error2()
        {
            errorHandler();
        }

        $parentFilePath = __DIR__ . '/testErrorHandler2_Parent.php';
        include_once $parentFilePath;
        $lineParent = __LINE__ - 1;
        $parentFileNumber = $this->_getFileNumber($parentFilePath);
        $thisFileNumber = $this->_getFileNumber(__FILE__);
        function test2()
        {
            global $line1;

            trigger_error2();
            $line1 = __LINE__ - 1;
        }

        function test1()
        {
            global $line2;

            test2();
            $line2 = __LINE__ - 1;
        }

        trigger_error2();
        $line = __LINE__ - 1;
        test1();
        $line3 = __LINE__ - 1;

        $binData1 = file_get_contents(B::getStatic('$_workDir') . "/ErrorLog/{$parentFileNumber}.bin");

        $cmpBinData1 = rtrim(B::compressIntArray(array ($parentFileNumber, $line_, $thisFileNumber, $lineParent)), PHP_EOL);
        $this->assertTrue(strpos($binData1, $cmpBinData1) !== false);

        $cmpBinData1 = rtrim(B::compressIntArray(array ($parentFileNumber, $lineA, $parentFileNumber, $lineB, $parentFileNumber, $lineC, $thisFileNumber, $lineParent)), PHP_EOL);
        $this->assertTrue(strpos($binData1, $cmpBinData1) !== false);

        $binData2 = file_get_contents(B::getStatic('$_workDir') . "/ErrorLog/{$thisFileNumber}.bin");

        $cmpBinData2 = rtrim(B::compressIntArray(array ($thisFileNumber, $line)), PHP_EOL);
        $this->assertTrue(strpos($binData2, $cmpBinData2) !== false);

        $cmpBinData2 = rtrim(B::compressIntArray(array ($thisFileNumber, $line1, $thisFileNumber, $line2, $thisFileNumber, $line3)), PHP_EOL);
        $this->assertTrue(strpos($binData2, $cmpBinData2) !== false);

        ob_start();
        self::$exeMode |= B::IGNORING_BREAK_POINT;

        self::$error->errorHandler2(E_USER_DEPRECATED, '', B::$prependErrorLog, debug_backtrace());

        self::$error->errorHandler2(E_USER_NOTICE, '', B::$prependErrorLog, debug_backtrace());

        self::$error->errorHandler2(E_USER_WARNING, '', B::$prependErrorLog, debug_backtrace());

        self::$error->errorHandler2(E_ERROR, '', B::$prependErrorLog, debug_backtrace());

        self::$error->errorHandler2(E_WARNING, '', B::$prependErrorLog, debug_backtrace());

        self::$error->errorHandler2(E_PARSE, '', B::$prependErrorLog, debug_backtrace());

        self::$error->errorHandler2(E_NOTICE, '', B::$prependErrorLog, debug_backtrace());

        self::$error->errorHandler2(E_CORE_ERROR, '', B::$prependErrorLog, debug_backtrace());

        self::$error->errorHandler2(E_CORE_WARNING, '', B::$prependErrorLog, debug_backtrace());

        self::$error->errorHandler2(E_COMPILE_ERROR, '', B::$prependErrorLog, debug_backtrace());

        self::$error->errorHandler2(E_COMPILE_WARNING, '', B::$prependErrorLog, debug_backtrace());

        self::$error->errorHandler2(E_STRICT, '', B::$prependErrorLog, debug_backtrace());

        self::$error->errorHandler2(E_RECOVERABLE_ERROR, '', B::$prependErrorLog, debug_backtrace());

        self::$error->errorHandler2(E_DEPRECATED, '', B::$prependErrorLog, debug_backtrace());

        self::$exeMode &= ~B::IGNORING_BREAK_POINT;
        ob_end_clean();
    }

    /**
     * @covers \BreakpointDebugging_Error<extended>
     *
     * @expectedException        \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging_Error_InAllCase FUNCTION=errorHandler2 ID=5
     */
    function testErrorHandler2_B()
    {
        ob_start();
        self::$exeMode |= B::IGNORING_BREAK_POINT;
        self::$error->errorHandler2(-1, '', B::$prependErrorLog, debug_backtrace());
    }

}

?>
