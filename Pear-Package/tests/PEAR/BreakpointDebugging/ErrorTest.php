<?php

chdir(__DIR__ . '/../../../');
require_once './PEAR_Setting/BreakpointDebugging_MySetting.php';

use \BreakpointDebugging as B;

B::isUnitTestExeMode(true);
/**
 * Test class for BreakpointDebugging_Error.
 * Generated by PHPUnit on 2013-02-17 at 07:57:23.
 */
class BreakpointDebugging_ErrorTest extends \BreakpointDebugging_UnitTestOverriding
{
    static $error;
    static $exeMode;

    static function setUpBeforeClass()
    {
        self::$exeMode = &B::refStatic('$exeMode');
    }

    function setUp()
    {
        parent::setUp();
        $errorLogDirectory = B::getStatic('$_workDir') . '/ErrorLog/';
        if (is_dir($errorLogDirectory)) {
            $errorLogDirElements = scandir($errorLogDirectory);
            foreach ($errorLogDirElements as $errorLogDirElement) {
                $errorLogDirElementPath = $errorLogDirectory . $errorLogDirElement;
                if (!is_file($errorLogDirElementPath)) {
                    continue;
                }
                // Deletes the error log file, variable configuring file or the error location file.
                unlink($errorLogDirElementPath);
            }
            rmdir($errorLogDirectory);
        }
        self::$error = new \BreakpointDebugging_Error();
    }

    function tearDown()
    {
        self::$exeMode &= ~B::IGNORING_BREAK_POINT;
        if (ob_get_level() === 2) {
            ob_end_clean();
        }
        B::assert(ob_get_level() === 1);
    }

    /**
     * @covers \BreakpointDebugging_Error<extended>
     */
    function test__construct()
    {
        self::$exeMode = B::LOCAL_DEBUG_OF_RELEASE | B::UNIT_TEST;
        new \BreakpointDebugging_Error();

        self::$exeMode = B::LOCAL_DEBUG | B::UNIT_TEST;
        new \BreakpointDebugging_Error();

        B::setXebugExists(false);
        new \BreakpointDebugging_Error();
        B::setXebugExists(true);
    }

    private function _exceptionHandler2()
    {
        throw new \Exception();
    }

    /**
     * @covers \BreakpointDebugging_Error<extended>
     */
    public function testExceptionHandler2()
    {
        ob_start();

        try {
            self::$exeMode = B::LOCAL_DEBUG | B::UNIT_TEST | B::IGNORING_BREAK_POINT;
            $this->_exceptionHandler2($GLOBALS, array ('Test1.'));
        } catch (\Exception $e) {
            self::$error->exceptionHandler2($e, '');
        }
        try {
            self::$exeMode = B::LOCAL_DEBUG_OF_RELEASE | B::UNIT_TEST | B::IGNORING_BREAK_POINT;
            $this->_exceptionHandler2($GLOBALS, array ('Test1.'));
        } catch (\Exception $e) {
            self::$error->exceptionHandler2($e, '');
        }
        try {
            self::$exeMode = B::REMOTE_DEBUG | B::UNIT_TEST | B::IGNORING_BREAK_POINT;
            $this->_exceptionHandler2($GLOBALS, array ('Test1.'));
        } catch (\Exception $e) {
            self::$error->exceptionHandler2($e, '');
        }

        ob_end_clean();
    }

    /**
     * @covers \BreakpointDebugging_Error<extended>
     *
     * @expectedException \BreakpointDebugging_ErrorException
     * @expectedExceptionMessage CLASS=BreakpointDebugging_Error FUNCTION=logBufferWriting ID=4
     *
     */
    public function testExceptionHandler2_B()
    {
        self::$exeMode = B::LOCAL_DEBUG | B::UNIT_TEST | B::IGNORING_BREAK_POINT | 256;
        self::$error->exceptionHandler2(new \Exception(), '');
    }

    /**
     * @covers \BreakpointDebugging_Error<extended>
     */
    public function testErrorHandler2()
    {
        ob_start();

        self::$exeMode = B::LOCAL_DEBUG | B::UNIT_TEST | B::IGNORING_BREAK_POINT;
        self::$error->errorHandler2(E_USER_ERROR, '', B::$prependErrorLog, debug_backtrace());

        ob_end_clean();
    }

}

?>
