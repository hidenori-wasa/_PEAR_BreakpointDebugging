<?php

chdir(__DIR__ . '/../../../');
require_once './PEAR_Setting/BreakpointDebugging_MySetting.php';

use \BreakpointDebugging as B;

B::checkUnitTestExeMode();

/**
 * Test class for BreakpointDebugging_Error.
 * Generated by PHPUnit on 2012-10-08 at 13:08:45.
 */
// class BreakpointDebugging_ErrorTest extends \BreakpointDebugging_UnitTest // For step execution.
class BreakpointDebugging_ErrorTest extends \PHPUnit_Framework_TestCase // For continuation execution.
{
    static $error;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    function setUp()
    {
        $errorLogDirectory = B::$workDir . '/ErrorLog/';
        if (!is_dir($errorLogDirectory)) {
            return;
        }
        $errorLogDirElements = scandir($errorLogDirectory);
        foreach ($errorLogDirElements as $errorLogDirElement) {
            $errorLogDirElementPath = $errorLogDirectory . $errorLogDirElement;
            if (!is_file($errorLogDirElementPath)) {
                continue;
            }
            // Deletes the error log file, variable configuring file or the error location file.
            unlink($errorLogDirElementPath);
        }
    }

    /**
     * Gets a file number of a file name in the file of "ErrorLog.var.conf".
     *
     * @param type $fileName File name which was registered in the file of "ErrorLog.var.conf".
     */
    private function _getFileNumber($fileName)
    {
        $fileName = str_replace('\\', '/', $fileName);
        $pFile = fopen(B::$workDir . '/ErrorLog/ErrorLog.var.conf', 'rb');
        fgets($pFile);
        while ($readFileLine = fgets($pFile)) {
            $readFileName = substr($readFileLine, 0, strrpos($readFileLine, '?'));
            $readFileName = str_replace('\\', '/', $readFileName);
            if (strcasecmp($fileName, $readFileName) === 0) {
                fclose($pFile);
                return rtrim(substr($readFileLine, strrpos($readFileLine, '?') + 1), PHP_EOL);
            }
        }
        fclose($pFile);
        assert(false);
    }

    /**
     * @covers BreakpointDebugging_Error::exceptionHandler2
     */
    public function testExceptionHandler2()
    {
        global $line1_, $line2_, $lineA_, $lineB_;

        B::setPropertyForTest('BreakpointDebugging_InAllCase', '$_handlerOf', 'exception'); // This registers as exception handler.
        self::$error = new \BreakpointDebugging_Error();

        $parentFilePath = __DIR__ . '/testExceptionHandler2_Parent.php';
        require_once $parentFilePath;
        $lineParent = __LINE__ - 1;
        $parentFileNumber = $this->_getFileNumber($parentFilePath);
        $thisFileNumber = $this->_getFileNumber(__FILE__);
        function test2_()
        {
            global $line1_;

            BreakpointDebugging_ErrorTest::$error->exceptionHandler2(new \Exception(), B::$prependExceptionLog);
            $line1_ = __LINE__ - 1;
        }

        function test1_()
        {
            global $line2_;

            test2_();
            $line2_ = __LINE__ - 1;
        }

        BreakpointDebugging_ErrorTest::$error->exceptionHandler2(new \Exception(), B::$prependExceptionLog);
        $line = __LINE__ - 1;
        test1_();
        $line3 = __LINE__ - 1;

        $binData1 = file_get_contents(B::$workDir . "/ErrorLog/{$parentFileNumber}.bin");

        $cmpBinData1 = rtrim(B::compressIntArray(array ($parentFileNumber, $line__, $thisFileNumber, $lineParent)), PHP_EOL);
        $this->assertTrue(strpos($binData1, $cmpBinData1) !== false);

        $cmpBinData1 = rtrim(B::compressIntArray(array ($parentFileNumber, $lineA_, $parentFileNumber, $lineB_, $parentFileNumber, $lineC_, $thisFileNumber, $lineParent)), PHP_EOL);
        $this->assertTrue(strpos($binData1, $cmpBinData1) !== false);

        $binData2 = file_get_contents(B::$workDir . "/ErrorLog/{$thisFileNumber}.bin");

        $cmpBinData2 = rtrim(B::compressIntArray(array ($thisFileNumber, $line)), PHP_EOL);
        $this->assertTrue(strpos($binData2, $cmpBinData2) !== false);

        $cmpBinData2 = rtrim(B::compressIntArray(array ($thisFileNumber, $line1_, $thisFileNumber, $line2_, $thisFileNumber, $line3)), PHP_EOL);
        $this->assertTrue(strpos($binData2, $cmpBinData2) !== false);

        B::setPropertyForTest('BreakpointDebugging_InAllCase', '$_handlerOf', 'none'); // This registers as none handler.
    }

    /**
     * @covers BreakpointDebugging_Error::errorHandler2
     */
    public function testErrorHandler2()
    {
        global $line1, $line2, $lineA, $lineB;

        $handlerStore = B::getPropertyForTest('BreakpointDebugging_InAllCase', '$_handlerOf'); // Stores the handler.
        B::setPropertyForTest('BreakpointDebugging_InAllCase', '$_handlerOf', 'error'); // This registers as error handler.
        self::$error = new \BreakpointDebugging_Error();
        function errorHandler()
        {
            BreakpointDebugging_ErrorTest::$error->errorHandler2(E_USER_ERROR, '', B::$prependErrorLog);
        }

        function trigger_error2()
        {
            errorHandler();
        }

        $parentFilePath = __DIR__ . '/testErrorHandler2_Parent.php';
        require_once $parentFilePath;
        $lineParent = __LINE__ - 1;
        $parentFileNumber = $this->_getFileNumber($parentFilePath);
        $thisFileNumber = $this->_getFileNumber(__FILE__);
        function test2()
        {
            global $line1;

            trigger_error2();
            $line1 = __LINE__ - 1;
        }

        function test1()
        {
            global $line2;

            test2();
            $line2 = __LINE__ - 1;
        }

        trigger_error2();
        $line = __LINE__ - 1;
        test1();
        $line3 = __LINE__ - 1;

        $binData1 = file_get_contents(B::$workDir . "/ErrorLog/{$parentFileNumber}.bin");

        $cmpBinData1 = rtrim(B::compressIntArray(array ($parentFileNumber, $line_, $thisFileNumber, $lineParent)), PHP_EOL);
        $this->assertTrue(strpos($binData1, $cmpBinData1) !== false);

        $cmpBinData1 = rtrim(B::compressIntArray(array ($parentFileNumber, $lineA, $parentFileNumber, $lineB, $parentFileNumber, $lineC, $thisFileNumber, $lineParent)), PHP_EOL);
        $this->assertTrue(strpos($binData1, $cmpBinData1) !== false);

        $binData2 = file_get_contents(B::$workDir . "/ErrorLog/{$thisFileNumber}.bin");

        $cmpBinData2 = rtrim(B::compressIntArray(array ($thisFileNumber, $line)), PHP_EOL);
        $this->assertTrue(strpos($binData2, $cmpBinData2) !== false);

        $cmpBinData2 = rtrim(B::compressIntArray(array ($thisFileNumber, $line1, $thisFileNumber, $line2, $thisFileNumber, $line3)), PHP_EOL);
        $this->assertTrue(strpos($binData2, $cmpBinData2) !== false);

        B::setPropertyForTest('BreakpointDebugging_InAllCase', '$_handlerOf', $handlerStore); // Restores handler.
    }

}

?>
