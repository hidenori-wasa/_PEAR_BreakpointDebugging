<?php

chdir(__DIR__ . '/../../../');
require_once './PEAR_Setting/BreakpointDebugging_MySetting.php';

use \BreakpointDebugging as B;

B::checkUnitTestExeMode();

/**
 * Test class for BreakpointDebugging_Error.
 * Generated by PHPUnit on 2012-10-08 at 13:08:45.
 */
class BreakpointDebugging_ErrorTest extends PHPUnit_Framework_TestCase
{
    static $error;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    function setUp()
    {
        $errorLogDirectory = B::$workDir . '/ErrorLog/';
        if (!is_dir($errorLogDirectory)) {
            return;
        }
        $errorLogDirElements = scandir($errorLogDirectory);
        foreach ($errorLogDirElements as $errorLogDirElement) {
            $errorLogDirElementPath = $errorLogDirectory . $errorLogDirElement;
            if (!is_file($errorLogDirElementPath)) {
                continue;
            }
            // Deletes the error log file, variable configuring file or the error location file.
            unlink($errorLogDirElementPath);
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers BreakpointDebugging_Error::exceptionHandler2
     * @todo Implement testExceptionHandler2().
     */
    public function testExceptionHandler2()
    {
        // B::$_handlerOf = 'exception'; // This registers as exception handler.
        // $this->_error = new \BreakpointDebugging_Error();
        // $this->_error->exceptionHandler2(new \Exception(), B::$prependExceptionLog);
        // B::$_handlerOf = 'none'; // This registers as none handler.

        $this->markTestIncomplete(
        'This test has not been implemented yet.'
        );
    }

    /**
     * @covers BreakpointDebugging_Error::errorHandler2
     * @todo Implement testErrorHandler2().
     */
    public function testErrorHandler2()
    {
        global $line1, $line2, $lineA, $lineB;

        $handlerStore = B::getPropertyForTest('BreakpointDebugging_InAllCase', '$_handlerOf'); // Stores the handler.
        B::setPropertyForTest('BreakpointDebugging_InAllCase', '$_handlerOf', 'error'); // This registers as error handler.
        self::$error = new \BreakpointDebugging_Error();
        function errorHandler()
        {
            BreakpointDebugging_ErrorTest::$error->errorHandler2(E_USER_ERROR, '', B::$prependErrorLog);
        }

        function trigger_error2()
        {
            errorHandler();
        }

        require_once __DIR__ . '/testErrorHandler2_Parent.php';
        $lineParent = __LINE__ - 1;
        function test2()
        {
            global $line1;

            trigger_error2();
            $line1 = __LINE__ - 1;
        }

        function test1()
        {
            global $line2;

            test2();
            $line2 = __LINE__ - 1;
        }

        trigger_error2();
        $line = __LINE__ - 1;
        test1();
        $line3 = __LINE__ - 1;

        $binData1 = file_get_contents(B::$workDir . '/ErrorLog/1.bin');

        $cmpBinData1 = '';
        $tmpArray = array (0x81, 0x80 + $line_, 0x82, 0x80 + $lineParent);
        foreach ($tmpArray as $element) {
            $cmpBinData1 .= chr($element);
        }
        $this->assertTrue(strpos($binData1, $cmpBinData1) !== false);
        $cmpBinData1 = '';
        $tmpArray = array (0x81, 0x80 + $lineA, 0x81, 0x80 + $lineB, 0x81, 0x80 + $lineC, 0x82, 0x80 + $lineParent);
        foreach ($tmpArray as $element) {
            $cmpBinData1 .= chr($element);
        }
        $this->assertTrue(strpos($binData1, $cmpBinData1) !== false);

        $binData2 = file_get_contents(B::$workDir . '/ErrorLog/2.bin');
        $cmpBinData2 = '';
        $tmpArray = array (0x82, 0x80 + $line);
        foreach ($tmpArray as $element) {
            $cmpBinData2 .= chr($element);
        }
        $this->assertTrue(strpos($binData2, $cmpBinData2) !== false);

        $cmpBinData2 = '';
        $tmpArray = array (0x82, 0x80 + $line1, 0x82, 0x80 + $line2, 0x82, 0x80 + $line3);
        foreach ($tmpArray as $element) {
            $cmpBinData2 .= chr($element);
        }
        $this->assertTrue(strpos($binData2, $cmpBinData2) !== false);

        B::setPropertyForTest('BreakpointDebugging_InAllCase', '$_handlerOf', $handlerStore); // Restores handler.
    }

    /**
     * @covers BreakpointDebugging_Error::outputErrorCallStackLog2
     * @todo Implement testOutputErrorCallStackLog2().
     */
    public function testOutputErrorCallStackLog2()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
        'This test has not been implemented yet.'
        );
    }

}

?>
