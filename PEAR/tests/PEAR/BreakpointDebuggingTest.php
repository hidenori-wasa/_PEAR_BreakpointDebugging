<?php

chdir(__DIR__ . '/../../');
require_once './PEAR_Setting/BreakpointDebugging_MySetting.php';

use \BreakpointDebugging as B;

B::checkUnitTestExeMode();

/**
 * Test class for BreakpointDebugging.
 * Generated by PHPUnit on 2012-09-30 at 16:24:29.
 */
class BreakpointDebuggingTest extends PHPUnit_Framework_TestCase
{
    /**
     * @covers BreakpointDebugging::breakpoint
     */
    public function testBreakpoint()
    {
        global $_BreakpointDebugging_EXE_MODE;

        $debugBacktrace = debug_backtrace();
        $storeDebugBacktrace = $debugBacktrace;
        $_BreakpointDebugging_EXE_MODE &= ~B::UNIT_TEST;
        B::breakpoint('Error message.', $debugBacktrace);
        $_BreakpointDebugging_EXE_MODE |= B::UNIT_TEST;
        $this->assertTrue($debugBacktrace === $storeDebugBacktrace);
    }

    /**
     * @covers BreakpointDebugging::convertMbStringForDebug
     */
    public function testConvertMbStringForDebug()
    {
        global $_BreakpointDebugging_EXE_MODE;

        if (!($_BreakpointDebugging_EXE_MODE & B::RELEASE)) { // In case of not release.
            $testArray = array (2, "\xE6\x96\x87\xE5\xAD\x97 ");
            $debugValues = B::convertMbStringForDebug('SJIS', 1, $testArray, "\xE6\x96\x87\xE5\xAD\x97 ");
            $this->assertTrue($debugValues[0] === 1);
            $cmpArray = array (2, "\x95\xB6\x8E\x9A ");
            $this->assertTrue($debugValues[1] === $cmpArray);
            $this->assertTrue($debugValues[2] === "\x95\xB6\x8E\x9A ");
        }
    }

    /**
     * @covers BreakpointDebugging::iniSet
     */
    public function testIniSet()
    {
        B::iniSet('default_charset', 'SJIS');

        while (true) {
            try {
                // First parameter does not exist.
                B::iniSet('not_exist', 'true');
            } catch (\BreakpointDebugging_Error_Exception $e) {
                $this->assertTrue($e->getMessage() === '"ini_set()" failed.');
                break;
            }
            $this->assertTrue(false);
        }

        try {
            // Second parameter is not character string.
            B::iniSet('default_charset', 8);
        } catch (\BreakpointDebugging_UnitTest_Exception $e) {
            return;
        }
        $this->assertTrue(false);
    }

    /**
     * @covers BreakpointDebugging::iniCheck
     */
    public function testIniCheck()
    {
        ob_start();
        B::iniCheck('safe_mode', '', 'Test message 1.');
        $this->assertTrue(ob_get_contents() === '');
        ob_clean();
        B::iniCheck('safe_mode', 'On', 'Test message 2.');
        $this->assertTrue(ob_get_contents() !== '');
        ob_clean();
        B::iniCheck('xdebug.remote_host', array ('127.0.0.1', 'localhost'), 'Test message 3.');
        $this->assertTrue(ob_get_clean() !== '');
    }

    /**
     * @covers BreakpointDebugging::getPropertyForTest
     */
    public function testGetPropertyForTest()
    {
        global $_BreakpointDebugging;

        $this->assertTrue(B::getPropertyForTest('BreakpointDebugging_InAllCase', 'LOCAL_DEBUG') === 1); // Constant property.
        $this->assertTrue(B::getPropertyForTest('BreakpointDebugging_InAllCase', '$_handlerOf') === 'none'); // Private static property.
        $this->assertTrue(B::getPropertyForTest($_BreakpointDebugging, '$_onceFlag') === array ()); // Private auto property.
        try {
            B::getPropertyForTest($_BreakpointDebugging, '$_handlerOf'); // Private static property of base class.
        } catch (\BreakpointDebugging_UnitTest_Exception $e) {
            $this->assertTrue(true);
            return;
        }
        $this->assertTrue(false);
    }

    /**
     * @covers BreakpointDebugging::setPropertyForTest
     */
    public function testSetPropertyForTest()
    {
        global $_BreakpointDebugging;

        B::setPropertyForTest('BreakpointDebugging_InAllCase', '$_handlerOf', 'change'); // Private static property.
        $this->assertTrue(B::getPropertyForTest('BreakpointDebugging_InAllCase', '$_handlerOf') === 'change');
        B::setPropertyForTest($_BreakpointDebugging, '$_onceFlag', array ('change')); // Private auto property.
        $this->assertTrue(B::getPropertyForTest($_BreakpointDebugging, '$_onceFlag') === array ('change'));
        try {
            B::setPropertyForTest($_BreakpointDebugging, '$_handlerOf', 'change'); // Private static property of base class.
        } catch (\BreakpointDebugging_UnitTest_Exception $e) {
            $this->assertTrue(true);
            return;
        }
        $this->assertTrue(false);
    }

    /**
     * @covers BreakpointDebugging::makeUnitTestException
     */
    public function testMakeUnitTestException()
    {
        try {
            B::makeUnitTestException();
        } catch (\BreakpointDebugging_UnitTest_Exception $e) {
            return;
        }
        $this->assertTrue(false);
    }

    /**
     * @covers BreakpointDebugging::checkUnitTestExeMode
     */
    public function testCheckUnitTestExeMode()
    {
        B::checkUnitTestExeMode();
    }

    /**
     * @covers BreakpointDebugging::testExecuteUnitTest
     */
    public function testExecuteUnitTest()
    {
        $testFileNames = array (
            'BreakpointDebugging-ExceptionTest.php',
        );
        ob_start();
        // Executes unit tests.
        B::executeUnitTest($testFileNames, __DIR__);
        ob_clean();
    }

    /**
     * @covers BreakpointDebugging::displayVerification
     * @todo Implement testDisplayVerification().
     */
    public function testDisplayVerification()
    {
        global $_BreakpointDebugging;

        $mandate = "January 01 2000";
        ob_start();
        $return = $_BreakpointDebugging->displayVerification('sscanf', array ($mandate, "%s %d %d", &$month, &$day, &$year));
        $this->assertTrue($return === 3);
        $this->assertTrue($month === 'January');
        $this->assertTrue($day === 1);
        $this->assertTrue($year === 2000);
        $this->assertTrue(ob_get_clean() !== '');
    }

}

?>
